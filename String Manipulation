/* Find the Length of a String

You can find the length of a String value by writing .length after the string variable or string literal.

"Alan Peter".length; // 10

For example, if we created a variable var firstName = "Charles", we could find out how long the string "Charles" is by using 
the firstName.length property. */

// Example 1
var firstNameLength = 0;
var firstName = "Ada";

firstNameLength = firstName.length;

// Example 2

// Setup
var lastNameLength = 0;
var lastName = "Lovelace";

lastNameLength = lastName;
lastNameLength = lastName.length;

/* Use Bracket Notation to Find the First Character in a String
Bracket notation is a way to get a character at a specific index within a string.

Most modern programming languages, like JavaScript, don't start counting at 1 
like humans do. They start at 0. This is referred to as Zero-based indexing.

For example, the character at index 0 in the word "Charles" is "C". So if var firstName = "Charles", you can 
get the value of the first letter of the string by using firstName[0]. */

// First letter of first name
var firstLetterOfFirstName = "";
var firstName = "Ada";

firstLetterOfFirstName = firstName[0];

// Setup
var firstLetterOfLastName = "";
var lastName = "Lovelace";

// First letter of last name
firstLetterOfLastName = lastName[0];

/* Understand String Immutability
In JavaScript, String values are immutable, which means that they cannot be altered once created.

For example, the following code:

var myStr = "Bob";
myStr[0] = "J";
cannot change the value of myStr to "Job", because the contents of myStr cannot be altered. Note that this 
does not mean that myStr cannot be changed, just that the individual characters of a string literal cannot 
be changed. The only way to change myStr would be to assign it with a new string, like this:

var myStr = "Bob";
myStr = "Job";  */

// Example myStr value has a typo...
var myStr = "Jello World";
// Fix Me
myStr = "Hello World"; // this is the solution not mStr[0] = "H";

// End String Manipulation Commit
