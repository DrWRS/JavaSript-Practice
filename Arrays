/* Store Multiple Values in one Variable using JavaScript Arrays
With JavaScript array variables, we can store several pieces of data in one place.

You start an array declaration with an opening square bracket, end it with a closing 
square bracket, and put a comma between each entry, like this:  var sandwich = ["peanut butter", "jelly", "bread"]. */

// Example of an array containing string and numeric data

var myArray = ["Marijuana", 420];

/* Nest one Array within Another Array
You can also nest arrays within other arrays, like this: [["Bulls", 23], ["White Sox", 45]]. This is also called a 
Multi-dimensional Array. */

// Example 1
var ourArray = [["the universe", 42], ["everything", 101010]];

// Example 2
var myArray = [["Marijuana", 420], ["Poker", 415]];

/* Access Array Data with Indexes
We can access the data inside arrays using indexes.

Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, 
they are specifying an entry in the array. Like strings, arrays use zero-based indexing, so the first element in an array 
is element 0.

Example

var array = [50,60,70];
array[0]; // equals 50
var data = array[1]; // equals 60

Note - There shouldn't be any spaces between the array name and the square brackets, like array [0]. 
Although JavaScript is able to process this correctly, this may confuse other programmers reading your code. */

// Example
var myArray = [50,60,70];
//  Set the myData variable to equal the first myArray index value
var myData = myArray[0]; // equals 50

/* Modify Array Data With Indexes
Unlike strings, the entries of arrays are mutable and can be changed freely.

Example

var ourArray = [50,40,30];
ourArray[0] = 15; // equals [15,40,30] */

// Example
var ourArray = [18,64,99];
ourArray[1] = 45; // ourArray now equals [18,45,99].

// Setup
var myArray = [18,64,99];

myArray[0] = 45; // changes the myArray to [45, 64, 99]

/* Access Multi-Dimensional Arrays With Indexes
One way to think of a multi-dimensional array, is as an array of arrays. When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, and each additional pair of brackets refers to the next level of entries inside.

Example 1

var arr = [
  [1,2,3],
  [4,5,6],
  [7,8,9],
  [[10,11,12], 13, 14]
];
arr[3]; // equals [[10,11,12], 13, 14]
arr[3][0]; // equals [10,11,12]
arr[3][0][1]; // equals 11

Note - There shouldn't be any spaces between the array name and the square brackets, like array [0][0] and even this array [0] [0] 
is not allowed. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

// Example 2
// Setup
var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];

// Only change code below this line.
var myData = myArray[2][1];

/* Manipulate Arrays With push()
An easy way to append data to the end of an array is via the push() function.

.push() takes one or more parameters and "pushes" them onto the end of the array.

Example 1
var arr = [1,2,3];
arr.push(4);
// arr is now [1,2,3,4] */

// Example 2
var ourArray = ["Stimpson", "J", "cat"];
ourArray.push(["happy", "joy"]); 
// ourArray now equals ["Stimpson", "J", "cat", ["happy", "joy"]]

// Setup
var myArray = [["John", 23], ["cat", 2]]; // Add dog and 3 to myArray

myArray.push(["dog", 3]); // myArray now equals var myArray = [["John", 23], ["cat", 2], ["dog", 3]];

/* Manipulate Arrays With pop()
Another way to change the data in an array is with the .pop() function.  .pop() is used to "pop" a value 
off of the end of an array. We can store this "popped off" value by assigning it to a variable. In other words, 
.pop() removes the last element from an array and returns that element.  Any type of entry can be "popped" off 
of an array - numbers, strings, even nested arrays.  pop() always removes the last element of an array. What if 
you want to remove the first?  That's where .shift() comes in. It works just like .pop(), except it removes the 
first element instead of the last.

Example 1 pop()

var threeArr = [1, 4, 6];
var oneDown = threeArr.pop();
console.log(oneDown); // Returns 6
console.log(threeArr); // Returns [1, 4] */

// Example 2 pop()

var ourArray = [1,2,3];
var removedFromOurArray = ourArray.pop(); 
// removedFromOurArray now equals 3, and ourArray now equals [1,2]

// Setup
var myArray = [["John", 23], ["cat", 2]];

// Only change code below this line.
var removedFromMyArray = myArray.pop(["cat", 2]);

Example 3 shift()

var ourArray = ["Stimpson", "J", ["cat"]];
var removedFromOurArray = ourArray.shift();
// removedFromOurArray now equals "Stimpson" and ourArray now equals ["J", ["cat"]].

// Example 4 shift()
var myArray = [["John", 23], ["dog", 3]];

var removedFromMyArray = myArray.shift(); // ["John", 23] has been removed from myArray

// End Arrays Commit
